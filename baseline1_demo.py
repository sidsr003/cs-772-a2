# baseline_demo.py
"""
Gradio demo for Character Mapping Baseline Transliteration
Simple rule-based Hindi‚ÜíRoman transliteration
"""

import gradio as gr

# ========================================
# Character Mapping Dictionary
# ========================================

CHAR_MAP = {
    # Vowels
    '‡§Ö': 'a', '‡§Ü': 'aa', '‡§á': 'i', '‡§à': 'ii', '‡§â': 'u', '‡§ä': 'uu',
    '‡§ã': 'ri', '‡•†': 'rii', '‡§å': 'lri', '‡§è': 'e', '‡§ê': 'ai', 
    '‡§ì': 'o', '‡§î': 'au',
    
    # Consonants
    '‡§ï': 'ka', '‡§ñ': 'kha', '‡§ó': 'ga', '‡§ò': 'gha', '‡§ô': 'nga',
    '‡§ö': 'cha', '‡§õ': 'chha', '‡§ú': 'ja', '‡§ù': 'jha', '‡§û': 'nya',
    '‡§ü': 'ta', '‡§†': 'tha', '‡§°': 'da', '‡§¢': 'dha', '‡§£': 'na',
    '‡§§': 'ta', '‡§•': 'tha', '‡§¶': 'da', '‡§ß': 'dha', '‡§®': 'na',
    '‡§™': 'pa', '‡§´': 'pha', '‡§¨': 'ba', '‡§≠': 'bha', '‡§Æ': 'ma',
    '‡§Ø': 'ya', '‡§∞': 'ra', '‡§≤': 'la', '‡§≥': 'la', '‡§µ': 'va',
    '‡§∂': 'sha', '‡§∑': 'sha', '‡§∏': 'sa', '‡§π': 'ha',
    
    # Matras (vowel signs)
    '‡§æ': 'aa', '‡§ø': 'i', '‡•Ä': 'ii', '‡•Å': 'u', '‡•Ç': 'uu',
    '‡•É': 'ri', '‡•Ñ': 'rii', '‡•¢': 'lri', '‡•á': 'e', '‡•à': 'ai',
    '‡•ã': 'o', '‡•å': 'au',
    
    # Halant (virama)
    '‡•ç': '',
    
    # Special symbols
    '‡§Ç': 'n', '‡§É': 'h', '‡§Å': 'n', '‡§Ω': '',
    
    # Additional consonants
    '‡§ï‡§º': 'qa', '‡§ñ‡§º': 'kha', '‡§ó‡§º': 'gha', '‡§ú‡§º': 'za', 
    '‡§°‡§º': 'da', '‡§¢‡§º': 'dha', '‡§´‡§º': 'fa',
    
    # Numbers
    '‡•¶': '0', '‡•ß': '1', '‡•®': '2', '‡•©': '3', '‡•™': '4',
    '‡•´': '5', '‡•¨': '6', '‡•≠': '7', '‡•Æ': '8', '‡•Ø': '9',
}


# ========================================
# Baseline Transliteration Function
# ========================================

def baseline_transliterate(hindi_word: str) -> str:
    """
    Simple character-by-character mapping baseline
    
    Args:
        hindi_word: Input Hindi word in Devanagari script
    
    Returns:
        Transliterated word in Roman script
    """
    hindi_word = hindi_word.strip()
    if not hindi_word:
        return ""
    
    result = []
    for char in hindi_word:
        if char in CHAR_MAP:
            result.append(CHAR_MAP[char])
        elif char == ' ':
            result.append(' ')
        elif char.isascii():
            result.append(char.lower())
        else:
            # Skip unknown Devanagari characters
            result.append('')
    
    return ''.join(result).lower()


# ========================================
# Gradio Interface
# ========================================

examples = [
    ["‡§≠‡§æ‡§∞‡§§"],
    ["‡§®‡§Æ‡§∏‡•ç‡§§‡•á"],
    ["‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä"],
    ["‡§Æ‡•Å‡§Ç‡§¨‡§à"],
    ["‡§∏‡•ç‡§µ‡§æ‡§ó‡§§"],
    ["‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶"],
    ["‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä"],
]

with gr.Blocks(title="Baseline Transliteration") as demo:
    gr.Markdown(
        """
        # üìù Character Mapping Baseline Transliteration
        
        Simple rule-based Hindi (Devanagari) ‚Üí Roman transliteration using fixed character mappings.
        
        **How it works:**
        - Each Devanagari character maps to a fixed Roman representation
        - No machine learning - just a lookup table
        - Very fast but limited accuracy (only ~0.14% exact match)
        
        **Compare with Transformer:**
        This baseline serves as a reference point to show the improvement achieved by 
        the Transformer model, which uses learned context-aware patterns.
        """
    )
    
    with gr.Row():
        with gr.Column(scale=1):
            inp_word = gr.Textbox(
                label="Hindi Word (Devanagari)",
                placeholder="‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§∂‡§¨‡•ç‡§¶ ‡§Ø‡§π‡§æ‡§Å ‡§≤‡§ø‡§ñ‡•á‡§Ç...",
                lines=2
            )
            
            btn = gr.Button("Transliterate", variant="primary", size="lg")
            
            gr.Markdown(
                """
                ### Limitations:
                - No context awareness
                - Fixed character mappings
                - Poor handling of abbreviations
                - Overproduces characters (e.g., '‡§ï' ‚Üí 'ka')
                """
            )
        
        with gr.Column(scale=1):
            out_word = gr.Textbox(
                label="Baseline Output (Roman)",
                lines=2,
                interactive=False
            )
            
            gr.Markdown(
                """
                ### Performance:
                - **Accuracy**: 0.14% (14/10,112)
                - **Precision**: 0.6379
                - **Recall**: 0.9419
                - **F1 Score**: 0.7561
                
                """
            )
    
    # Examples section
    gr.Markdown("### Try These Examples:")
    gr.Examples(
        examples=examples,
        inputs=inp_word,
        outputs=out_word,
        fn=baseline_transliterate,
        cache_examples=False
    )
    
    # Connect button and Enter key
    btn.click(
        fn=baseline_transliterate,
        inputs=inp_word,
        outputs=out_word
    )
    
    inp_word.submit(
        fn=baseline_transliterate,
        inputs=inp_word,
        outputs=out_word
    )
    
    # Footer
    gr.Markdown(
        """
        ---
        **Note:** This is a naive baseline for comparison purposes. 
        For production use, refer to the Transformer-based model which provides 
        significantly better accuracy and context-aware transliteration.
        """
    )

# Launch the demo
if __name__ == "__main__":
    demo.launch(
        server_name="0.0.0.0",
        server_port=7861,  # Different port from Transformer demo
        share=False,
        show_error=True
    )
